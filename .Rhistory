poisson_simulation <- rpois(n_simulations, lambda)
# 2. Simulating the Time to Recovery in Days
# Assume the recovery time for individuals follows an Exponential distribution
mean_recovery_time <- 7  # Average recovery time in days
recovery_simulation <- rexp(n_simulations, rate = 1 / mean_recovery_time)
# 3. Simulating Disease Transmission Rates in a Population
# Assume the probability of transmission follows a Beta distribution (proportion)
alpha <- 2  # Shape parameter 1
beta <- 5   # Shape parameter 2
transmission_simulation <- rbeta(n_simulations, alpha, beta)
# 4. Simulating the Risk of a Disease (Binary Outcome)
# The risk of contracting a disease in a population can be modeled with a Binomial distribution
population_size <- 1000  # Total population size
risk_probability <- 0.1  # Probability of contracting the disease
disease_outcome_simulation <- rbinom(n_simulations, population_size, risk_probability)
# 5. Calculating the Total Cost of Treatment
# Suppose the cost of treatment per patient follows a normal distribution
mean_cost <- 2000  # Average treatment cost
sd_cost <- 500     # Standard deviation of treatment cost
treatment_cost_simulation <- rnorm(n_simulations, mean = mean_cost, sd = sd_cost)
# 6. Simulating the Number of Hospital Admissions
# Hospital admissions may follow a Poisson distribution with variable rates
lambda_hospital <- 10  # Average number of hospital admissions per day
hospital_admission_simulation <- rpois(n_simulations, lambda_hospital)
# Estimate the total number of cases in an outbreak
estimated_cases <- mean(poisson_simulation)
# Estimate the average time to recovery
estimated_recovery_time <- mean(recovery_simulation)
# Estimate the average transmission probability
estimated_transmission_rate <- mean(transmission_simulation)
# Estimate the proportion of individuals affected by the disease
estimated_disease_risk <- mean(disease_outcome_simulation / population_size)
# Estimate the total treatment cost
estimated_total_treatment_cost <- mean(treatment_cost_simulation)
# Estimate the average number of hospital admissions
estimated_hospital_admissions <- mean(hospital_admission_simulation)
# Visualize the distribution of some key simulations
par(mfrow = c(2, 2))  # Plot in a 2x2 grid
# 1. Distribution of Total Number of Cases
hist(poisson_simulation, breaks = 30, col = 'lightblue', main = "Total Number of Cases in Outbreak",
xlab = "Number of Cases", ylab = "Frequency", border = 'black')
# 1. Distribution of Total Number of Cases
hist(poisson_simulation,
breaks = 30,
col = 'lightblue',
main = "Total Number of Cases in Outbreak",
xlab = "Number of Cases",
ylab = "Frequency",
border = 'black')
# 2. Distribution of Time to Recovery
hist(recovery_simulation,
breaks = 30,
col = 'lightgreen',
main = "Time to Recovery",
xlab = "Days",
ylab = "Frequency",
border = 'black')
# 3. Distribution of Disease Transmission Rate
hist(transmission_simulation,
breaks = 30,
col = 'lightcoral',
main = "Disease Transmission Rate",
xlab = "Transmission Probability",
ylab = "Frequency", border = 'black')
# 4. Distribution of Treatment Cost
hist(treatment_cost_simulation,
breaks = 30,
col = 'lightyellow',
main = "Treatment Cost per Patient",
xlab = "Cost ($)",
ylab = "Frequency",
border = 'black')
# Reset plot layout
par(mfrow = c(1, 1))
# 1. Distribution of Total Number of Cases
hist(poisson_simulation,
breaks = 30,
col = 'lightblue',
main = "Total Number of Cases in Outbreak",
xlab = "Number of Cases",
ylab = "Frequency",
border = 'black')
# 2. Distribution of Time to Recovery
hist(recovery_simulation,
breaks = 30,
col = 'lightgreen',
main = "Time to Recovery",
xlab = "Days",
ylab = "Frequency",
border = 'black')
# 3. Distribution of Disease Transmission Rate
hist(transmission_simulation,
breaks = 30,
col = 'lightcoral',
main = "Disease Transmission Rate",
xlab = "Transmission Probability",
ylab = "Frequency", border = 'black')
# 4. Distribution of Treatment Cost
hist(treatment_cost_simulation,
breaks = 30,
col = 'lightyellow',
main = "Treatment Cost per Patient",
xlab = "Cost ($)",
ylab = "Frequency",
border = 'black')
# Reset plot layout
par(mfrow = c(1, 1))
names(data)
data <- read.csv("data/pulse_data.csv")
names(data)
# Load necessary libraries
library(ggpubr)
# Load necessary libraries
library(tidyverse)
library(ggpubr)
# Read the dataset (replace with the path to your CSV file)
data <- read.csv("data/pulse_data.csv")
# First Plot with Full Customization - BMI Distribution
data |>
gghistogram(x = "BMI") |>
ggpar(
main = "Title",
submain = "Sub-title",
caption = "Sources: CHIRAL",
xlab = "BMI",
ylab = "Frequency",
font.main = c(16, "bold", "blue"),
font.submain = c(14, "italic", "purple"),
font.caption = c(10, "plain", "gray"),
font.x = c(14, "italic", "darkred"),
font.y = c(14, "bold", "darkgreen"),
xlim = c(10, 35),
ylim = c(1, 6),
x.text.angle = 45,
y.text.angle = 0,
legend = "top",
legend.title = "BMI Categories",
font.legend = c(12, "plain", "black"),
ggtheme = theme_minimal()
)
# 2. Overlay Normal Density Plot with `stat_overlay_normal_density()`
ggdensity(data, x = "Weight",
main = "Density Plot of Weight with Normal Overlay",
xlab = "Weight (kg)",
add = "norm",
fill = "lightgreen",
color = "darkgreen")
# 2. Overlay Normal Density Plot with `stat_overlay_normal_density()`
ggdensity(data,
x = "Weight",
main = "Density Plot of Weight with Normal Overlay",
xlab = "Weight (kg)",
add = "mean",
fill = "lightgreen",
color = "darkgreen")
# 3. Histogram plot using `gghistogram()` - Age Distribution (without extra customization)
gghistogram(data, x = "Age",
bins = 10,
main = "Histogram of Age Distribution",
xlab = "Age (years)",
fill = "purple",
color = "black",
alpha = 0.7)
# 4. ECDF plot using `ggecdf()` - BMI Distribution (without extra customization)
ggecdf(data, x = "BMI",
main = "ECDF Plot of BMI",
xlab = "BMI",
color = "orange")
# 5. QQ Plot to check normality using `ggqqplot()` - Pulse1 (without extra customization)
ggqqplot(data$Pulse1,
main = "QQ Plot of Pulse1",
xlab = "Theoretical Quantiles",
ylab = "Sample Quantiles",
color = "red")
# First Plot with Full Customization - BMI Distribution
data |>
gghistogram(x = "BMI") |>
ggpar(
main = "Title",
submain = "Sub-title",
caption = "Sources: CHIRAL",
xlab = "BMI",
ylab = "Frequency",
font.main = c(16, "bold", "blue"),
font.submain = c(14, "italic", "purple"),
font.caption = c(10, "plain", "gray"),
font.x = c(14, "italic", "darkred"),
font.y = c(14, "bold", "darkgreen"),
xlim = c(10, 35),
ylim = c(1, 6),
x.text.angle = 45,
y.text.angle = 0,
legend = "top",
legend.title = "BMI Categories",
font.legend = c(12, "plain", "black"),
ggtheme = theme_minimal()
)
# 5. QQ Plot to check normality using `ggqqplot()` - Pulse1 (without extra customization)
ggqqplot(data$Pulse1,
main = "QQ Plot of Pulse1",
xlab = "Theoretical Quantiles",
ylab = "Sample Quantiles",
color = "red")
# Load necessary libraries
library(ggpubr)
# Load necessary libraries
library(tidyverse)
library(ggpubr)
# Read the dataset (replace with the path to your CSV file)
data <- read.csv("data/pulse_data.csv")
# 1. Box Plot using `ggboxplot()`
# Box plot to show BMI distribution by Gender (Discrete X and Continuous Y)
ggboxplot(data,
x = "Gender", y = "BMI",
main = "Box Plot of BMI by Gender",
xlab = "Gender", ylab = "BMI",
fill = "lightblue", color = "black",
palette = "jco")
# 2. Violin Plot using `ggviolin()`
# Violin plot to show Pulse1 distribution by Exercise habit
ggviolin(data,
x = "Exercise", y = "Pulse1",
main = "Violin Plot of Pulse1 by Exercise",
xlab = "Exercise", ylab = "Pulse1",
fill = "lightgreen", color = "black",
palette = "Set3")
# 3. Dot Plot using `ggdotplot()`
# Dot plot to show Pulse2 distribution by Alcohol consumption
ggdotplot(data,
x = "Alcohol", y = "Pulse2",
main = "Dot Plot of Pulse2 by Alcohol Consumption",
xlab = "Alcohol", ylab = "Pulse2",
color = "blue", fill = "yellow",
dot.size = 3)
# 4. Strip Chart using `ggstripchart()`
# Stripchart to show BMI distribution by Smokes habit
ggstripchart(data,
x = "Smokes", y = "BMI",
main = "Stripchart of BMI by Smokes",
xlab = "Smokes", ylab = "BMI",
color = "red", fill = "lightgray",
jitter = 0.2, size = 2)
# 5. Bar Plot using `ggbarplot()`
# Bar plot to show the count of Gender by Exercise habit
ggbarplot(data,
x = "Gender", y = "Exercise",
main = "Bar Plot of Exercise by Gender",
xlab = "Gender", ylab = "Exercise",
fill = "pink", color = "black",
palette = "Pastel1")
# 5. Bar Plot using `ggbarplot()`
# Bar plot to show the count of Gender by Exercise habit
ggbarplot(data,
x = "Gender",
y = "Exercise",
main = "Bar Plot of Exercise by Gender",
xlab = "Gender",
ylab = "Exercise",
fill = "Gender",
color = "black",
palette = "Pastel1")
# 5. Bar Plot using `ggbarplot()`
# Bar plot to show the count of Gender by Exercise habit
ggbarplot(data,
x = "Gender",
y = "BMI",
main = "Bar Plot of Exercise by Gender",
xlab = "Gender",
ylab = "Exercise",
fill = "Gender",
color = "black",
palette = "Pastel1")
# 6. Line Plot using `ggline()`
# Line plot to show Pulse1 trend by Age group (using Age as a continuous variable)
ggline(data,
x = "Age", y = "Pulse1",
main = "Line Plot of Pulse1 by Age",
xlab = "Age", ylab = "Pulse1",
color = "darkblue", size = 1.5,
add = "mean_se")
# 7. Error Plot using `ggerrorplot()`
# Error plot to show BMI distribution by Gender with error bars
ggerrorplot(data,
x = "Gender", y = "BMI",
main = "Error Plot of BMI by Gender",
xlab = "Gender", ylab = "BMI",
add = "mean_se", color = "darkgreen",
error.plot = "crossbars", size = 2)
# 8. Pie Chart using `ggpie()`
# Pie chart to show the proportion of different BMICat categories
ggpie(data,
x = "BMICat",
main = "Pie Chart of BMI Categories",
fill = c("lightblue", "pink", "orange", "green"),
color = "white",
label = TRUE,
palette = "Set1")
# 9. Donut Chart using `ggdonutchart()`
# Donut chart to show the proportion of Alcohol consumption
ggdonutchart(data,
x = "Alcohol",
main = "Donut Chart of Alcohol Consumption",
fill = c("lightblue", "orange"),
label = TRUE, color = "white",
palette = "Set2")
# 10. Cleveland's Dot Plot using `ggdotchart()`
# Cleveland dot chart to show BMI distribution by Gender
ggdotchart(data,
x = "BMI", y = "Gender",
main = "Cleveland's Dot Plot of BMI by Gender",
color = "purple",
add = "segments",
theme = theme_cleveland())
# Read the dataset (replace with the path to your CSV file)
data <- read.csv("data/pulse_data.csv", stringsAsFactors = T)
glimpse(data)
# Read the dataset (replace with the path to your CSV file)
data <- read.csv("data/pulse_data.csv", stringsAsFactors = T)
# Load necessary libraries
library(tidyverse)
library(ggpubr)
# Read the dataset (replace with the path to your CSV file)
data <- read.csv("data/pulse_data.csv", stringsAsFactors = T)
# 1. Box Plot using `ggboxplot()`
# Box plot to show BMI distribution by Gender (Discrete X and Continuous Y)
ggboxplot(data,
x = "Gender", y = "BMI",
main = "Box Plot of BMI by Gender",
xlab = "Gender", ylab = "BMI",
fill = "lightblue", color = "black",
palette = "jco")
# 2. Violin Plot using `ggviolin()`
# Violin plot to show Pulse1 distribution by Exercise habit
ggviolin(data,
x = "Exercise", y = "Pulse1",
main = "Violin Plot of Pulse1 by Exercise",
xlab = "Exercise", ylab = "Pulse1",
fill = "lightgreen", color = "black",
palette = "Set3")
# 3. Dot Plot using `ggdotplot()`
# Dot plot to show Pulse2 distribution by Alcohol consumption
ggdotplot(data,
x = "Alcohol", y = "Pulse2",
main = "Dot Plot of Pulse2 by Alcohol Consumption",
xlab = "Alcohol", ylab = "Pulse2",
color = "blue", fill = "yellow",
dot.size = 3)
# 4. Strip Chart using `ggstripchart()`
# Stripchart to show BMI distribution by Smokes habit
ggstripchart(data,
x = "Smokes", y = "BMI",
main = "Stripchart of BMI by Smokes",
xlab = "Smokes", ylab = "BMI",
color = "red", fill = "lightgray",
jitter = 0.2, size = 2)
# 5. Bar Plot using `ggbarplot()`
# Bar plot to show the count of Gender by Exercise habit
ggbarplot(data,
x = "Gender", y = "Exercise",
main = "Bar Plot of Exercise by Gender",
xlab = "Gender", ylab = "Exercise",
fill = "pink", color = "black",
palette = "Pastel1")
# 5. Bar Plot using `ggbarplot()`
# Bar plot to show the count of Gender by Exercise habit
ggbarplot(data,
x = "Gender",
main = "Bar Plot of Exercise by Gender",
xlab = "Gender", ylab = "Exercise",
fill = "Exercise", color = "black",
palette = "Pastel1")
# 5. Bar Plot using `ggbarplot()`
# Bar plot to show the count of Gender by Exercise habit
ggbarplot(data,
x = "Gender",
main = "Bar Plot of Exercise by Gender",
xlab = "Gender", ylab = "Exercise",
fill = "Exercise", color = "black",
palette = "Pastel1")
ggbarplot(data,
x = "Gender",
main = "Bar Plot of Exercise by Gender",
xlab = "Gender",
ylab = "Exercise",
fill = "Exercise",
palette = "Pastel1")
ggbarplot(data,
x = "Gender",
y = "BMI",
main = "Bar Plot of Exercise by Gender",
xlab = "Gender",
ylab = "Exercise",
fill = "Exercise",
palette = "Pastel1")
# 5. Bar Plot using `ggbarplot()`
# Bar plot to show the count of Gender by Exercise habit
ggbarplot(data,
x = "Gender",
y = "BMI",
main = "Bar Plot of Exercise by Gender",
xlab = "Gender",
ylab = "Exercise",
palette = "Pastel1")
# 5. Bar Plot using `ggbarplot()`
# Bar plot to show the count of Gender by Exercise habit
ggbarplot(data,
x = "Gender",
y = "BMI",
main = "Bar Plot of Exercise by Gender",
xlab = "Gender",
ylab = "Exercise")
names(data)
# Load necessary packages
library(tidyverse)   # For data wrangling and visualization
library(easystats)   # For statistical analyses and summaries
# Load the dataset
# Replace "data/pulse_data.csv" with your file path if it's not in the working directory
data <- read.csv("data/pulse_data.csv")
# Load necessary packages
library(tidyverse)   # For data wrangling and visualization
library(easystats)   # For statistical analyses and summaries
# Load the dataset
# Replace "data/pulse_data.csv" with your file path if it's not in the working directory
data <- read.csv("data/pulse_data.csv")
# Chi-square is used when the expected frequency in each cell of the contingency table is >= 5.
# Create a contingency table
gender_smokes_table <- table(data$Gender, data$Smokes)
gender_smokes_table
# Perform the Chi-square test
chi_sq_test <- chisq.test(gender_smokes_table)
chi_sq_test
# Report
report(chi_sq_test)
# Perform Fisher’s exact test
fisher_test <- fisher.test(small_table)
# Perform Fisher’s exact test
fisher_test <- fisher.test(gender_smokes_table)
fisher_test
# Report
report(fisher_test)
# Load necessary packages
library(tidyverse)   # For data wrangling and visualization
library(easystats)   # For statistical analyses and summaries
# Load the dataset
# Replace "data/pulse_data.csv" with your file path if it's not in the working directory
data <- read.csv("data/pulse_data.csv")
# Visualize Relationships
# Scatterplots are useful for visualizing potential correlations.
# Example: Scatterplot of Height vs. Weight
plot(data$Height,
data$Weight,
main = "Scatterplot of Height vs. Weight",
xlab = "Height (cm)",
ylab = "Weight (kg)",
pch = 16, col = "blue")
# Pearson Correlation Coefficient
# Use Pearson for linear relationships and normally distributed data.
# Example: Correlation between Height and Weight
correlation_pearson <- cor(data$Height, data$Weight, method = "pearson")
correlation_pearson
# Reported
report(correlation_pearson)
# Pearson Correlation Coefficient
# Use Pearson for linear relationships and normally distributed data.
# Example: Correlation between Height and Weight
correlation_pearson <- cor(data$Height, data$Weight, method = "pearson")
correlation_pearson
# Reported
report(correlation_pearson)
# Pearson Correlation Coefficient
# Use Pearson for linear relationships and normally distributed data.
# Example: Correlation between Height and Weight
correlation_pearson <- cor.test(data$Height, data$Weight, method = "pearson")
correlation_pearson
# Reported
report(correlation_pearson)
# Example: Correlation between Age and BMI
correlation_spearman <- cor.test(data$Age, data$BMI, method = "spearman")
correlation_spearman
report(correlation_spearman)
# Kendall Correlation Coefficient
# Use Kendall for small datasets or ordinal data.
# Example: Correlation between Age and BMI
correlation_kendall <- cor.test(data$Age, data$BMI, method = "kendall")
correlation_kendall
# Report
report(correlation_kendall)
data <- read.csv("data/Thalassemia_QoL.csv")
names(data)
# Load necessary packages
library(tidyverse)   # For data wrangling and visualization
library(easystats)   # For statistical analyses and summaries
# Load the dataset
qol_data <- read.csv("data/Thalassemia_QoL.csv")
# Simple Linear Regression
# Predict QOL_Score based on Age_of_Participants
# Fit the simple linear regression model
simple_model <- lm(QOL_Score ~ Age_of_Participants, data = qol_data)
# View the summary of the model
summary(simple_model)
# report
report(simple_model)
report(simple_model) |>
summary()
# Fit the multiple linear regression model
multiple_model <- lm(QOL_Score ~ Age_of_Participants + Gender + Economic_Class + Medical_Expense, data = data)
multiple_model
# View the summary of the model
summary(multiple_model)
report(multiple_model)
report(multiple_model) |>
summary()
